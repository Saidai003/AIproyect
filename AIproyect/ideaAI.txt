Crea un codigo python que tenga una clase llamada cerebro. 
La clase "cerebro" tiene dos atributos, un arbol AVL llamado STM que contiene, en cada nodo, un mapa llamado Almacenamiento que contiene una llave caracter ascii y como valor un vector llamado LTM con todos los caracteres ascii. 
Debes hacer que cerebro llene el vector LTMsetup , luego almacene de menor a mayor todos los caracteres ascii en cada llave de los nodos STM, finalmente que en cada nodo de STM reeplaze los datos de LTM de ese mismo mapa por los de LTMsetup. 
Luego, el codigo principal de mas abajo hara una instacia de cerebro y su metodo Aprender recibira secuencialmente caracteres de un texto.txt, almacenandolos en un vector Memoria de tamano definido por el usuario por medio de input por consola. 
Memoria estara inicializada con caracteres vacios en primer lugar, y poco a poco llenara el vector, cuando el vector este totalmente lleno de los nuevos caracteres, entonces seguira leyendo y reemplazara el caracter mas antiguo por el mas nuevo, desplazando todo como una cola. Por cada instancia que el vector cambia, se llama al metodo Analizar de el objeto cerebro, que buscara cada caracter en el arbol STM simultaneamente, 
y luego repetira una cierta cantidad X el escoger un numero al azar entre 0 a (tamano del vector de ese mapa - 1), y encontrara el caracter que se encuentra en ese numero aleatorio, y guardara los caracteres iniciales y encontrados en una cola, tambien guardara en una variable distinta el caracter que mas veces se repitio en todas las busquedas, de forma dinamica, y luego volver a buscar en STM el caracter encontrado por cada caracter inicial de busqueda.
Cuando se terminan las X repeticiones, se compara el caracter encontrado que mas veces se ha repetido con el caracter siguiente de el texto.txt. Si no son iguales, se usa cola para eliminar (de cada mapa recorrido por el caracter inicial) el caracter encontrado de cada vector (respectivo a la palabra inicial) solo si el caracter no se encuentra solo una vez en el vector. En caso contrario, es decir, que el caracter encontrado es igual al caracter siguiente, 
se agrega en todos los vectores de cada mapa de cada nodo recorrido ese mismo caracter, aumentando asi la cantidad de veces que se repite el caracter en los vectores.  Al finalizar todo el texto.txt, se le pide al usuario que ingrese su propio texto como input y se realiza el mismo proceso solo que esta vez no se hace comparaciones, 
si no que se imprime por pantalla el caracter encontrado que mas veces se repite por cada actualizacion del texto del input + el caracter encontrado que se repite mas veces, hasta llegar a Y repeticiones definidas por el usuario por medio de input. Es posible que haya escrito palabras en vez de caracteres, considera palabras como caracteres. Escribe todo el codigo, no omitas nada,
 ni crees comentarios sobre donde implementar el resto del codigo, porque tu haras el codigo completo

 Crea una codigo python que tenga una clase llamada mente. En pocas palabras, tiene una cola de, tamano X definido por el usuario, de caracteres ascii llamada STM (con caracteres vacios de forma predeterminada) y un mapa LTM con todos los caracteres ascii como llave y un numero del 50 predeterminado como valor. El codigo debe aprender de un texto.txt, ingresando los caracteres en la cola secuencialmente y reemplazar los mas antiguos. Por cada estado de la cola, se hace una cantidad de busqueda Y, definido por el usuario, en LTM, buscando por cada caracter de STM aquel caracter llave que tenga el valor mas alto comparado con un numero aleatorio generado entre 1 a 100 (se genera un numero nuevo al recorrer el mapa). Si el numero generado es menor o igual al numero asociado a la llave caracter especifica, entonces se usa esa palabra llave para buscar nuevamente una palabra en el mapa que coincida con el nuevo caracter = caracter llave y asi hasta llegar a Y repeticiones. Luego, se compara el siguiente caracter con el caracter que mas veces se recorrio por cada una de las busquedas, osea, por cada caracter del STM. Si son iguales, premia LTM, aumentando en 10 (siempre y cuando no se pase a 100) el numero asociado a todas las llaves caracters recorridas por cada caracter de STM. en caso, contrario se disminuyen en 10, siempre y cuando no se pase a negativo.